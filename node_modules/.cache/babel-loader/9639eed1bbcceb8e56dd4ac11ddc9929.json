{"ast":null,"code":"var _jsxFileName = \"/Users/learnacademy/Desktop/tic-tac-toe-joey-ronnie/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from './components/Square';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst App = () => {\n  _s();\n\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [turn, setTurn] = useState(0);\n\n  const checkTurn = index => {\n    //conditional statement to check if a player one\n    if (calculateWinner(squares) !== null) {\n      //conditional state to display the right player that one \n      const winner = calculateWinner(squares) === \"X\" ? \"Player One(X) won\" : \"Player Two(O) won\";\n      alert(winner);\n    } else if (calculateWinner(squares) === null && turn > 8) {\n      alert(\"Tie Game!\");\n    } else if (squares[index] === null) {\n      // places an X if its player one and an O if its player 2\n      const current = turn % 2 === 0 ? \"X\" : \"O\"; // Updating the data state\n\n      squares[index] = current; //setting the current square that was clicked on to either an X or an O\n\n      setSquares[index] = current; // Adding 1 to count to switch turns \n\n      setTurn(turn + 1);\n      let updateGame = [...squares];\n      let updateTurn = [...turn];\n      setSquares;\n    }\n  }; //the function that was given to check whether one player got 3 squares in a row \n\n\n  function calculateWinner(squares) {\n    const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n        return squares[a];\n      }\n    }\n\n    return null;\n  } //funtion to reset game board\n\n\n  const resetGame = () => {\n    setSquares(Array(9).fill(null));\n    setTurn(0);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Tic Tac Toe\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"TicTacBoard\",\n      children: [squares.map((value, index) => {\n        return /*#__PURE__*/_jsxDEV(Square, {\n          Key: index,\n          value: value,\n          index: index,\n          checkTurn: checkTurn\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: resetGame,\n        children: \"Reset Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(App, \"C4Xe3f81yK8/0jawDugv5P+X85k=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Square","App","squares","setSquares","Array","fill","turn","setTurn","checkTurn","index","calculateWinner","winner","alert","current","updateGame","updateTurn","lines","i","length","a","b","c","resetGame","map","value"],"sources":["/Users/learnacademy/Desktop/tic-tac-toe-joey-ronnie/src/App.js"],"sourcesContent":["import React, { useState } from 'react'\nimport Square from './components/Square'\nimport './App.css'\n\n\nconst App = () => {\n  const [squares, setSquares] = useState(Array(9).fill(null))\n  const [turn, setTurn] = useState(0)\n  \n  const checkTurn = (index) => {\n    //conditional statement to check if a player one\n    if(calculateWinner(squares) !== null){\n      //conditional state to display the right player that one \n     const winner = calculateWinner(squares) === \"X\" ? \"Player One(X) won\" : \"Player Two(O) won\"\n      alert(winner)\n    }else if(calculateWinner(squares) === null &&  turn >8){\n      alert(\"Tie Game!\")\n    }else if (squares[index] === null) {\n      // places an X if its player one and an O if its player 2\n      const current = turn  % 2 === 0 ? \"X\" : \"O\"\n      // Updating the data state\n      squares[index] = current;\n      //setting the current square that was clicked on to either an X or an O\n      setSquares[index] = current\n      // Adding 1 to count to switch turns \n      setTurn(turn+1)\n      let updateGame =[...squares]\n      let updateTurn =[...turn]\n\n      setSquares\n  }\n}\n//the function that was given to check whether one player got 3 squares in a row \nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n//funtion to reset game board\nconst resetGame = () => {\n  setSquares(Array(9).fill(null))\n  setTurn(0)\n}\n  return (\n    <>\n      <h1>Tic Tac Toe</h1>\n      <div className=\"TicTacBoard\">\n      {squares.map((value,index)=>{\n        return(\n          <Square \n          Key={index}\n          value={value}\n          index={index}\n          checkTurn={checkTurn}\n           />\n        )\n      })}\n       <button onClick={resetGame}>Reset Game</button>\n     </div>\n    </>\n  )\n}\n\nexport default App"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAO,WAAP;;;;AAGA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAChB,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBJ,QAAQ,CAACK,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAtC;EACA,MAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,CAAD,CAAhC;;EAEA,MAAMS,SAAS,GAAIC,KAAD,IAAW;IAC3B;IACA,IAAGC,eAAe,CAACR,OAAD,CAAf,KAA6B,IAAhC,EAAqC;MACnC;MACD,MAAMS,MAAM,GAAGD,eAAe,CAACR,OAAD,CAAf,KAA6B,GAA7B,GAAmC,mBAAnC,GAAyD,mBAAxE;MACCU,KAAK,CAACD,MAAD,CAAL;IACD,CAJD,MAIM,IAAGD,eAAe,CAACR,OAAD,CAAf,KAA6B,IAA7B,IAAsCI,IAAI,GAAE,CAA/C,EAAiD;MACrDM,KAAK,CAAC,WAAD,CAAL;IACD,CAFK,MAEA,IAAIV,OAAO,CAACO,KAAD,CAAP,KAAmB,IAAvB,EAA6B;MACjC;MACA,MAAMI,OAAO,GAAGP,IAAI,GAAI,CAAR,KAAc,CAAd,GAAkB,GAAlB,GAAwB,GAAxC,CAFiC,CAGjC;;MACAJ,OAAO,CAACO,KAAD,CAAP,GAAiBI,OAAjB,CAJiC,CAKjC;;MACAV,UAAU,CAACM,KAAD,CAAV,GAAoBI,OAApB,CANiC,CAOjC;;MACAN,OAAO,CAACD,IAAI,GAAC,CAAN,CAAP;MACA,IAAIQ,UAAU,GAAE,CAAC,GAAGZ,OAAJ,CAAhB;MACA,IAAIa,UAAU,GAAE,CAAC,GAAGT,IAAJ,CAAhB;MAEAH,UAAU;IACb;EACF,CAtBC,CAJgB,CA2BlB;;;EACA,SAASO,eAAT,CAAyBR,OAAzB,EAAkC;IAChC,MAAMc,KAAK,GAAG,CACZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CADY,EAEZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAFY,EAGZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAHY,EAIZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAJY,EAKZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CALY,EAMZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CANY,EAOZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAPY,EAQZ,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CARY,CAAd;;IAUA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,KAAK,CAACE,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;MACrC,MAAM,CAACE,CAAD,EAAIC,CAAJ,EAAOC,CAAP,IAAYL,KAAK,CAACC,CAAD,CAAvB;;MACA,IAAIf,OAAO,CAACiB,CAAD,CAAP,IAAcjB,OAAO,CAACiB,CAAD,CAAP,KAAejB,OAAO,CAACkB,CAAD,CAApC,IAA2ClB,OAAO,CAACiB,CAAD,CAAP,KAAejB,OAAO,CAACmB,CAAD,CAArE,EAA0E;QACxE,OAAOnB,OAAO,CAACiB,CAAD,CAAd;MACD;IACF;;IACD,OAAO,IAAP;EACD,CA9CiB,CA+ClB;;;EACA,MAAMG,SAAS,GAAG,MAAM;IACtBnB,UAAU,CAACC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAV;IACAE,OAAO,CAAC,CAAD,CAAP;EACD,CAHD;;EAIE,oBACE;IAAA,wBACE;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAEE;MAAK,SAAS,EAAC,aAAf;MAAA,WACCL,OAAO,CAACqB,GAAR,CAAY,CAACC,KAAD,EAAOf,KAAP,KAAe;QAC1B,oBACE,QAAC,MAAD;UACA,GAAG,EAAEA,KADL;UAEA,KAAK,EAAEe,KAFP;UAGA,KAAK,EAAEf,KAHP;UAIA,SAAS,EAAED;QAJX;UAAA;UAAA;UAAA;QAAA,QADF;MAQD,CATA,CADD,eAWC;QAAQ,OAAO,EAAEc,SAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAXD;IAAA;MAAA;MAAA;MAAA;IAAA,QAFF;EAAA,gBADF;AAkBD,CAtED;;GAAMrB,G;;KAAAA,G;AAwEN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}